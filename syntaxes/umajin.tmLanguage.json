{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Umajin",
	"scopeName": "source.umajin",

	"patterns": [
		{
			"include": "#statements"
		}
	],

	"repository": {
		"statements": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#ct"
				},
				{
					"include": "#keyword"
				},
				{
					"include": "#identifier"
				},
				{
					"include": "#literal"
				},
				{
					"include": "#operator"
				},
				{
					"include": "#multiline"
				}
			]
		},

		"comments" : {
			"patterns": [
				{
					"include": "#comment-block"
				},
				{
					"include": "#comment-line"
				}
			]
		},

		"comment-block" : {
			"patterns": [
				{
					"name": "comment.block",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]
		},
		"comment-line" : {
			"patterns": [
				{
					"name": "comment.line.double-slash",
					"match": "//.*"
				}
			]
		},

		"strings" : {
			"patterns": [
				{
					"include": "#string-single"
				},
				{
					"include": "#string-double"
				},
				{
					"include": "#string-backtick"
				}
			]
		},

		"string-single": {
			"name": "string.quoted.single",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "string.quoted.single.content",
					"match": "[^'\\\\]|\\\\(?:[^xuU]|x[0-7]\\h|u\\h{4}|U00(?:0\\h|10)\\h{4})"
				}
			]
		},
		"string-double": {
			"name": "string.quoted.double",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "string.quoted.double.content",
					"match": "[^\"\\\\]|\\\\(?:[^xuU]|x[0-7]\\h|u\\h{4}|U00(?:0\\h|10)\\h{4})"
				}
			]
		},
		"string-backtick": {
			"name": "string.quoted.other.backtick",
			"begin": "`",
			"end": "`",
			"patterns": [
				{
					"name": "string.quoted.other.backtick.content",
					"match": "[^`\\\\]|\\\\(?:[^xuU]|x[0-7]\\h|u\\h{4}|U00(?:0\\h|10)\\h{4})"
				}
			]
		},

		"ct" : {
			"patterns": [
				{
					"name": "meta.preprocessor",
					"match": "#\\b\\w+\\b"
				}
			]
		},

		"keyword" : {
			"patterns": [
				{
					"name": "keyword.control",
					"match": "\\b(?:include_once|case|constant|define|elseif|else|end|exitloop|if|in|instance|loop|method|nextloop|property|raise|return|scope|switch)\\b"
				}
			]
		},

		"identifier" : {
			"patterns": [
				{
					"name": "variable",
					"match": "\\b[_a-zA-Z][_a-zA-Z0-9]*+\\b"
				}
			]
		},

		"literal" : {
			"patterns": [
				{
					"include": "#hex-literal"
				},
				{
					"include": "#bin-literal"
				},
				{
					"include": "#oct-literal"
				},
				{
					"include": "#float-literal"
				},
				{
					"include": "#dec-literal"
				}
			]
		},

		"hex-literal" : {
			"patterns": [
				{
					"name": "constant.numeric.hexadecimal",
					"match": "0x\\h(?:_?\\h)*+\\b(?!\\.)"
				}
			]
		},

		"bin-literal" : {
			"patterns": [
				{
					"name": "constant.numeric.binary",
					"match": "0b[01](?:_?[01])*+\\b(?!\\.)"
				}
			]
		},

		"oct-literal" : {
			"patterns": [
				{
					"name": "constant.numeric.octal",
					"match": "0o[0-7](?:_?[0-7])*+\\b(?!\\.)"
				}
			]
		},

		"float-literal" : {
			"patterns": [
				{
					"name": "constant.numeric.floating-point",
					"match": "(?:(?:[1-9](?:_?\\d)*+|0)e[+-]?(?:[1-9](?:_?\\d)*+|0)|(?:[1-9](?:_?\\d)*+|0)\\.(?:[1-9](?:_?\\d)*+|0)?(?:e[+-]?(?:[1-9](?:_?\\d)*+|0))?|\\.(?:[1-9](?:_?\\d)*+|0)(?:e[+-]?(?:[1-9](?:_?\\d)*+|0))?)\\b(?!\\.)"
				}
			]
		},

		"dec-literal" : {
			"patterns": [
				{
					"name": "constant.numeric.decimal",
					"match": "(?:[1-9](?:_?\\d)*+|0)\\b(?!\\.)"
				}
			]
		},

		"operator" : {
			"patterns": [
				{
					"name": "keyword.operator",
					"match": "\\.\\.?\\.?|\\(|\\)|==?|!=?|\\*=?|/=?|%=?|\\^=?|~=?|\\+(?:\\+|=)?|-(?:-|=)?|&(?:&?=)?|\\|(?:\\|?=)?|<(?:<?=)?|>(?:>?=)?|\\[|\\]|\\{|\\}|;|,|\\?|::?"
				}
			]
		},

		"multiline" : {
			"patterns": [
				{
					"name": "meta.preprocessor",
					"match": "\\\\$"
				}
			]
		}
	}
}